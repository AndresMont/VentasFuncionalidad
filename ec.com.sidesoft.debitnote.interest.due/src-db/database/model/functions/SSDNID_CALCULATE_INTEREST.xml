<?xml version="1.0"?>
  <database name="FUNCTION SSDNID_CALCULATE_INTEREST">
    <function name="SSDNID_CALCULATE_INTEREST" type="VARCHAR">
      <parameter name="pinstanceid" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[pInstance RECORD;
	vMessageOK VARCHAR2(2000) := '';
	vMessageError VARCHAR2(2000) := '';
	vRecordID VARCHAR2(32);
	vRecord RECORD;
	vSetting RECORD;
	vDaysLate NUMBER;
	vInterestLatePayment NUMBER;
	vCollectionExpenses NUMBER;
	
BEGIN

	DBMS_OUTPUT.PUT_LINE( 'Updating PInstance - Processing ' || pInstanceID);
	vMessageError := 'PInstanceNotFound';
  AD_UPDATE_PINSTANCE(pInstanceID, NULL, 'Y', NULL, NULL);
	
	BEGIN
	
		--Cargamos la configuracion para calculo de intereses
		SELECT * INTO vSetting FROM ssdnid_calcinterestsetting WHERE isactive='Y' ORDER BY created DESC LIMIT 1;
		IF vSetting.ssdnid_calcinterestsetting_id IS NULL THEN
			RAISE_APPLICATION_ERROR(-20000, 'No existe configuracion para calculo de intereses');
		END IF;
		
		FOR vRecord IN (
			SELECT ps.*
			FROM fin_payment_schedule AS ps
				JOIN c_invoice AS i ON i.c_invoice_id=ps.c_invoice_id
				JOIN c_doctype AS dt ON dt.c_doctype_id=i.c_doctypetarget_id
			WHERE i.issotrx='Y' AND dt.em_sspics_isretail='Y' AND ps.outstandingamt>vSetting.minimumvalue
				AND ps.duedate>vSetting.startdate AND ps.duedate::DATE<now()::DATE
				AND now()::DATE-ps.duedate::DATE-vSetting.daysofgrace>0
		) LOOP
			--Calculamos los dias de atraso
			vDaysLate := (now()::DATE-vRecord.duedate::DATE-vSetting.daysofgrace)::NUMERIC;
			--Calculamos los intereses por mora
			vInterestLatePayment := vRecord.outstandingamt * (vSetting.rate / 36000) * vDaysLate;
			
			--Calculamos los gastos de cobraza
			vCollectionExpenses := 0;
			IF vSetting.factor > 0 THEN
				IF vDaysLate <= vSetting.factor THEN
					vCollectionExpenses := vDaysLate * (
						(SELECT surchargevalue FROM ssdnid_tablesic AS tsic
						WHERE vRecord.outstandingamt>=tsic.rangefrom
							AND vRecord.outstandingamt<=tsic.rangeto
							AND ssdnid_calcinterestsetting_id=vSetting.ssdnid_calcinterestsetting_id)
						/ vSetting.factor);
				ELSE
					vCollectionExpenses := vSetting.defaultsurchargevalue;
				END IF;
			END IF;
			
			UPDATE fin_payment_schedule SET em_ssdnid_interestlatepayment=COALESCE(vRecord.em_ssdnid_interestlatepayment,0)+(vInterestLatePayment/vDaysLate),
				em_ssdnid_collectionexpenses=COALESCE(vRecord.em_ssdnid_collectionexpenses,0)+(vCollectionExpenses/vDaysLate)
			WHERE fin_payment_schedule_id=vRecord.fin_payment_schedule_id;
		END LOOP;

		--Actualizamos los intereses por mora
		/*
		UPDATE fin_payment_schedule AS ps SET
			em_ssdnid_interestlatepayment=(
				ps.outstandingamt * (vSetting.rate / 36000) * (now()::DATE-ps.duedate::DATE-vSetting.daysofgrace)::NUMERIC
			)
		FROM c_invoice AS i
			JOIN c_doctype AS dt ON dt.c_doctype_id=i.c_doctypetarget_id
		WHERE i.issotrx='Y' AND dt.em_sspics_isretail='Y' AND ps.outstandingamt>vSetting.minimumvalue
			AND ps.duedate>vSetting.startdate AND ps.duedate::DATE<now()::DATE
			AND now()::DATE-ps.duedate::DATE-vSetting.daysofgrace>0;
		*/
		
		--Actualizamos los gastos de cobraza
		/*
		UPDATE fin_payment_schedule AS ps SET
			em_ssdnid_collectionexpenses=CASE
				WHEN (now()::DATE-ps.duedate::DATE-vSetting.daysofgrace)::NUMERIC <= vSetting.factor THEN
					(now()::DATE-ps.duedate::DATE-vSetting.daysofgrace)::NUMERIC
					* ((SELECT surchargevalue FROM ssdnid_tablesic AS tsic
					WHERE ps.outstandingamt>=tsic.rangefrom AND ps.outstandingamt<=tsic.rangeto) / vSetting.factor)
				ELSE
					vSetting.defaultsurchargevalue
			END
		FROM c_invoice AS i
			JOIN c_doctype AS dt ON dt.c_doctype_id=i.c_doctypetarget_id
		WHERE i.issotrx='Y' AND dt.em_sspics_isretail='Y' AND ps.outstandingamt>vSetting.minimumvalue
			AND ps.duedate>vSetting.startdate AND ps.duedate::DATE<now()::DATE
			AND now()::DATE-ps.duedate::DATE-vSetting.daysofgrace>0 AND vSetting.factor>0;
		*/

		DBMS_OUTPUT.PUT_LINE( 'Updating PInstance - Finished ' || vMessageOK);
	  AD_UPDATE_PINSTANCE(pInstanceID, NULL, 'N', 1, vMessageOK);
		RETURN 'OK';
	END;

	EXCEPTION WHEN OTHERS THEN
	vMessageError := '@ERROR=' || SQLERRM;
	DBMS_OUTPUT.PUT_LINE( vMessageError);
 AD_UPDATE_PINSTANCE(pInstanceID, NULL, 'N', 0, vMessageError);
	RETURN vMessageError;
END SSDNID_CALCULATE_INTEREST
]]></body>
    </function>
  </database>
